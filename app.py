import telebot
from telebot import types
import os
import threading
from datetime import datetime, timedelta
from flask import Flask, request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID", -1002063123602))  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "YOUR_WEBHOOK_URL")

bot = telebot.TeleBot(BOT_TOKEN)
server = Flask(__name__)

def revoke_link_later(chat_id, invite_link, delay=30):
    """–û—Ç–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    def worker():
        try:
            threading.Event().wait(delay)
            bot.revoke_chat_invite_link(chat_id, invite_link)
            logger.info(f"–°—Å—ã–ª–∫–∞ {invite_link} –æ—Ç–æ–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ {invite_link}: {e}")

    threading.Thread(target=worker, daemon=True).start()

@bot.message_handler(commands=['start'])
def send_temporary_link(message):
    if message.chat.type != "private":
        return  # –ü—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –≤ –æ–±—â–µ–º —á–∞—Ç–µ

    try:
        expire_time = datetime.now() + timedelta(seconds=60)
        expire_timestamp = int(expire_time.timestamp())
        invite = bot.create_chat_invite_link(
            chat_id=CHAT_ID,
            expire_date=expire_timestamp,
            member_limit=1
        )
        invite_link = invite.invite_link

        bot.send_message(
            message.chat.id,
            f"üå¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç –æ –¢–∞–∏–ª–∞–Ω–¥–µ –∏ –ü—Ö—É–∫–µ—Ç–µ "
            f"(–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 —Å–µ–∫—É–Ω–¥):\n\n{invite_link}\n\n"
            f"‚ö†Ô∏è –ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –°—Å—ã–ª–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥."
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (—Ä–∞–Ω—å—à–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
        revoke_link_later(CHAT_ID, invite_link, delay=30)

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ {invite_link} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}"
        bot.send_message(message.chat.id, error_msg)
        logger.error(error_msg)

@bot.chat_member_handler()
def on_user_join(update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç"""
    try:
        chat_id = update.chat.id
        user_id = update.new_chat_member.user.id
        status = update.new_chat_member.status
        user_name = update.new_chat_member.user.first_name or "–î—Ä—É–≥"

        if status == "member":
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å)
            bot.restrict_chat_member(
                chat_id,
                user_id,
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            )

            # –ö–Ω–æ–ø–∫–∞ "–Ø —á–µ–ª–æ–≤–µ–∫"
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("–Ø —á–µ–ª–æ–≤–µ–∫", callback_data=f"verify_{user_id}")
            markup.add(btn)

            bot.send_message(
                chat_id,
                f"üå¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! üåû\n\n"
                "–¢—ã –ø–æ–ø–∞–ª –≤ —É—é—Ç–Ω—ã–π —á–∞—Ç –æ –¢–∞–∏–ª–∞–Ω–¥–µ –∏ –ü—Ö—É–∫–µ—Ç–µ! –ó–¥–µ—Å—å –¥–µ–ª–∏–º—Å—è —Å–æ–≤–µ—Ç–∞–º–∏, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, "
                "–æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ–º—Å—è –ø–æ-–¥–æ–±—Ä–æ–º—É.\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –¥–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫ üòä",
                reply_markup=markup
            )

            logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_id} ({user_name}) –≤—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("verify_"))
def verify_user(call):
    """–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    try:
        chat_id = call.message.chat.id
        user_id = int(call.data.split("_")[1])

        if call.from_user.id == user_id:
            # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            bot.restrict_chat_member(
                chat_id,
                user_id,
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )

            bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—ë–ø–ª—ã–π —á–∞—Ç üå∫")
            bot.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Ç–∞–π—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. "
                "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! üèùÔ∏è",
                chat_id,
                call.message.message_id
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!")
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å —á—É–∂—É—é –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# Webhook –¥–ª—è Railway
@server.route('/' + BOT_TOKEN, methods=['POST'])
def getMessage():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        json_string = request.stream.read().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return "Error", 500

@server.route("/")
def webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        bot.remove_webhook()
        webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
        bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return "Webhook set!", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return f"Error setting webhook: {e}", 500

@server.route("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return "OK", 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞)
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_unknown_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "Start"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_button = types.KeyboardButton("/start")
    markup.add(start_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "Start"
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=markup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.run(host="0.0.0.0", port=port, debug=False)
